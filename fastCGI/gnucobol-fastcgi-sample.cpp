/* Generated by            cobc 2.0.20131031 */
/* Generated from              gnucobol-fastcgi-sample.cbl */
/* Generated at                Sep 13 2016 06:14:08 */
/* GNU Cobol C++ build date    May 16 2016 14:03:52 */
/* GNU Cobol C++ package date  May 03 2014 21:13:34 UTC */
/* Compile command         cobc -x -C gnucobol-fastcgi-sample.cbl */

/*#include <stdio.h>*/
#include "fcgi_stdio.h"
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"gnucobol-fastcgi-sample.cbl"
#define  COB_PACKAGE_VERSION		"2.0"
#define  COB_PATCH_LEVEL		20131031
#define  COB_MODULE_FORMATTED_DATE	"Sep 13 2016 06:14:08"
#define  COB_MODULE_DATE		20160913
#define  COB_MODULE_TIME		61408

/* Global variables */
#include "gnucobol-fastcgi-sample.cpp.h"

/* Function prototypes */

static int		gnucobol__fastcgi__sample();
static int		gnucobol__fastcgi__sample_(const int);

/* Main function */
int
main(int argc, char **argv)
{
  cob_init(argc, argv);
  cob_stop_run(gnucobol__fastcgi__sample());
}

/* Functions */

/* PROGRAM-ID 'gnucobol-fastcgi-sample' */

/* ENTRY 'gnucobol__fastcgi__sample' */

static int
gnucobol__fastcgi__sample()
{
  return gnucobol__fastcgi__sample_(0);
}

static int
gnucobol__fastcgi__sample_(const int entry)
{
  /* Program local variables */
  #include "gnucobol-fastcgi-sample.cpp.l.h"

  /* Start of function code */

  /* CANCEL callback */
  if(unlikely(entry < 0)) {
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  cob_module_enter(&module, &cob_glob_ptr, 0);

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  _frame_ptr = _frame_stack;
  _frame_ptr->perform_through = 0;

  /* Initialize program */
  if(unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Save number of call params */
  module->module_num_params = cob_glob_ptr->cob_call_params;

  /* Entry dispatch */
  goto _l_2;

  /* PROCEDURE DIVISION */

  /* Line: 90        : Entry     gnucobol-fastcgi-sample : gnucobol-fastcgi-sample.cbl */
  _l_2:;

  /* Line: 90        : CALL               : gnucobol-fastcgi-sample.cbl */
  cob_glob_ptr->cob_call_params = 0;
  RETURN_CODE = FCGI_Accept();
  cob_set_int(&_f_20, RETURN_CODE);

  /* Line: 97        : PERFORM            : gnucobol-fastcgi-sample.cbl */
  {
    for(;;)
    {
      if(((int)cob_cmp_s32(FASTCGI_ACCEPT, 0) < 0))
        break;

      /* Line: 99        : ACCEPT             : gnucobol-fastcgi-sample.cbl */
      cob_accept_time(&_f_7);

      /* Line: 100       : MOVE               : gnucobol-fastcgi-sample.cbl */
      cob_move(COB_SET_FLD(_f0, 2, CURRENT_TIME_RAW.CT_HOURS, &_a_3), COB_SET_FLD(_f1, 2, CURRENT_TIME.CT_HOURS, &_a_4));
      memcpy(CURRENT_TIME.CT_MINUTES, CURRENT_TIME_RAW.CT_MINUTES, 2);
      memcpy(CURRENT_TIME.CT_SECONDS, CURRENT_TIME_RAW.CT_SECONDS, 2);
      memcpy(CURRENT_TIME.CT_HUNDREDTHS, CURRENT_TIME_RAW.CT_HUNDREDTHS, 2);

      /* Line: 103       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
      cob_display(0, 1, 2, &_c_1, &_f_22);

      /* Line: 105       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
      cob_display(0, 1, 1, &_c_2);

      /* Line: 106       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
      cob_display(0, 1, 1, &_c_3);

      /* Line: 109       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
      cob_display(0, 1, 2, &_c_4, &_c_5);

      /* Line: 115       : PERFORM            : gnucobol-fastcgi-sample.cbl */
      (*(cob_u8_ptr)(NAME_INDEX)) = 1;
      {
        for(;;)
        {
          if(((int)cob_cmp_u8(NAME_INDEX, 34I64) > 0))
            break;

          /* Line: 118       : ACCEPT             : gnucobol-fastcgi-sample.cbl */
          cob_get_environment(COB_SET_FLD(_f0, 20, ENVIRONMENT_NAMES._UN2E2N1.FILLER_38.NAME_STRING[((*(cob_u8_ptr)(NAME_INDEX)) - 1)], &_a_5), &_f_24);

          /* Line: 123       : MOVE               : gnucobol-fastcgi-sample.cbl */
          cob_move(cob_intr_substitute(0, 0, 7, &_f_24, (cob_field *)&_c_6, (cob_field *)&_c_7, (cob_field *)&_c_8, (cob_field *)&_c_7, (cob_field *)&_c_9, (cob_field *)&_c_7), &_f_24);

          /* Line: 127       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
          cob_display(0, 1, 5, &_c_10, COB_SET_FLD(_f0, 20, ENVIRONMENT_NAMES._UN2E2N1.FILLER_38.NAME_STRING[((*(cob_u8_ptr)(NAME_INDEX)) - 1)], &_a_5), &_c_11, cob_intr_trim(0, 0, &_f_24, 2), &_c_12);

          /* Line: 135       : IF                 : gnucobol-fastcgi-sample.cbl */
          if((((int)cob_cmp(COB_SET_FLD(_f0, 20, ENVIRONMENT_NAMES._UN2E2N1.FILLER_38.NAME_STRING[((*(cob_u8_ptr)(NAME_INDEX)) - 1)], &_a_5), (cob_field *)&_c_13) == 0) && 
              ((int)cob_cmp(&_f_24, (cob_field *)&_c_14) == 0)))
          {

            /* Line: 139       : OPEN               : gnucobol-fastcgi-sample.cbl */
            cob_open(_h_WEBINPUT, 1, 0, NULL);
            if(unlikely(cob_glob_ptr->cob_exception_code != 0))
            {
              /* PERFORM Default Error Handler */
              _frame_ptr++;
              _frame_ptr->perform_through = 1;
              _frame_ptr->return_address_num = 0;
              goto _l_1;
              _l_5:
              _frame_ptr--;
            }

            /* Line: 140       : READ               : gnucobol-fastcgi-sample.cbl */
            cob_read_next(_h_WEBINPUT, NULL, 1);
            if(unlikely(cob_glob_ptr->cob_exception_code != 0))
            {
              if(cob_glob_ptr->cob_exception_code == 0x0501)
              {

                /* Line: 141       : MOVE               : gnucobol-fastcgi-sample.cbl */
                memset(_b_6, 32, 1024);
              }
              else
              {
                /* PERFORM Default Error Handler */
                _frame_ptr++;
                _frame_ptr->perform_through = 1;
                _frame_ptr->return_address_num = 1;
                goto _l_1;
                _l_6:
                _frame_ptr--;
              }
            }

            /* Line: 143       : CLOSE              : gnucobol-fastcgi-sample.cbl */
            cob_close(_h_WEBINPUT, NULL, 0, 0);
            if(unlikely(cob_glob_ptr->cob_exception_code != 0))
            {
              /* PERFORM Default Error Handler */
              _frame_ptr++;
              _frame_ptr->perform_through = 1;
              _frame_ptr->return_address_num = 2;
              goto _l_1;
              _l_7:
              _frame_ptr--;
            }

            /* Line: 146       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
            cob_display(0, 1, 4, &_c_15, &_c_16, cob_intr_substitute(0, 0, 7, COB_SET_FLD(_f0, 72, _b_6 + 0, &_a_5), (cob_field *)&_c_6, (cob_field *)&_c_7, (cob_field *)&_c_8, (cob_field *)&_c_7, (cob_field *)&_c_9, (cob_field *)&_c_7), &_c_12);
          }
          (*(cob_u8_ptr)(NAME_INDEX)) = ((*(cob_u8_ptr)(NAME_INDEX)) + 1);
        }
      }

      /* Line: 157       : DISPLAY            : gnucobol-fastcgi-sample.cbl */
      cob_display(0, 1, 6, &_c_17, &_f_22, &_c_18, &_f_12, &_f_22, &_c_19);

      /* Line: 165       : CALL               : gnucobol-fastcgi-sample.cbl */
      cob_glob_ptr->cob_call_params = 0;
      RETURN_CODE = FCGI_Accept();
      cob_set_int(&_f_20, RETURN_CODE);
    }
  }

  /* Line: 172       : GOBACK             : gnucobol-fastcgi-sample.cbl */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if(module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave(module);

  /* Program return */
  return RETURN_CODE;


  /* Paragraph Default Error Handler   */
  _l_1:;

  if(!(cob_glob_ptr->cob_error_file->flag_select_features & COB_SELECT_FILE_STATUS)) {
  	cob_fatal_error(COB_FERROR_FILE);
  }

  /* Implicit Default Error Handler return */
  if(_frame_ptr->perform_through == 1)
    goto P_switch;

  /* Fatal error if reached */
  cob_fatal_error(COB_FERROR_CODEGEN);


  /* Frame stack jump table */
  P_switch:
   switch(_frame_ptr->return_address_num) {
   case 2:
     goto _l_7;
   case 1:
     goto _l_6;
   case 0:
     goto _l_5;
   }
   cob_fatal_error(COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version(COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "gnucobol-fastcgi-sample";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (fvoidpptr)gnucobol__fastcgi__sample;
  module->module_cancel.funcptr = (fvoidpptr)gnucobol__fastcgi__sample_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel(module);

  /* Initialize WORKING-STORAGE */
  RETURN_CODE = 0;
  memset((cob_u8_t *)&CURRENT_TIME_RAW, 48, 8);
  cob_move(&cob_all_zero, COB_SET_FLD(_f0, 2, CURRENT_TIME.CT_HOURS, &_a_4));
  *(cob_u8_ptr)(CURRENT_TIME.FILLER_1) = 58;
  memset(CURRENT_TIME.CT_MINUTES, 48, 2);
  *(cob_u8_ptr)(CURRENT_TIME.FILLER_2) = 58;
  memset(CURRENT_TIME.CT_SECONDS, 48, 2);
  *(cob_u8_ptr)(CURRENT_TIME.FILLER_3) = 46;
  memset(CURRENT_TIME.CT_HUNDREDTHS, 48, 2);
  memset(FASTCGI_ACCEPT, 0, 4);
  *(cob_u8_ptr)(NEWLINE) = 10;
  *(cob_u8_ptr)(NAME_INDEX) = 0;
  memset(VALUE_STRING, 32, 256);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_4, "AUTH_TYPE", 9);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_4 + 9, 32, 11);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_5, "CONTENT_LENGTH", 14);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_5 + 14, 32, 6);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_6, "CONTENT_TYPE", 12);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_6 + 12, 32, 8);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_7, "DOCUMENT_ROOT", 13);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_7 + 13, 32, 7);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_8, "GATEWAY_INTERFACE", 17);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_8 + 17, 32, 3);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_9, "HTTP_ACCEPT", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_9 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_10, "HTTP_ACCEPT_CHARSET ", 20);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_11, "HTTP_ACCEPT_ENCODING", 20);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_12, "HTTP_ACCEPT_LANGUAGE", 20);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_13, "HTTP_COOKIE", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_13 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_14, "HTTP_CONNECTION", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_14 + 15, 32, 5);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_15, "HTTP_HOST", 9);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_15 + 9, 32, 11);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_16, "HTTP_REFERER", 12);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_16 + 12, 32, 8);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_17, "HTTP_USER_AGENT", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_17 + 15, 32, 5);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_18, "LIB_PATH", 8);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_18 + 8, 32, 12);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_19, "PATH", 4);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_19 + 4, 32, 16);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_20, "PATH_INFO", 9);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_20 + 9, 32, 11);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_21, "PATH_TRANSLATED", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_21 + 15, 32, 5);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_22, "QUERY_STRING", 12);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_22 + 12, 32, 8);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_23, "REMOTE_ADDR", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_23 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_24, "REMOTE_HOST", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_24 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_25, "REMOTE_IDENT", 12);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_25 + 12, 32, 8);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_26, "REMOTE_PORT", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_26 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_27, "REQUEST_METHOD", 14);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_27 + 14, 32, 6);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_28, "REQUEST_URI", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_28 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_29, "SCRIPT_FILENAME", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_29 + 15, 32, 5);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_30, "SCRIPT_NAME", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_30 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_31, "SERVER_ADDR", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_31 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_32, "SERVER_ADMIN", 12);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_32 + 12, 32, 8);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_33, "SERVER_NAME", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_33 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_34, "SERVER_PORT", 11);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_34 + 11, 32, 9);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_35, "SERVER_PROTOCOL", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_35 + 15, 32, 5);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_36, "SERVER_SIGNATURE", 16);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_36 + 16, 32, 4);
  memcpy(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_37, "SERVER_SOFTWARE", 15);
  memset(ENVIRONMENT_NAMES._UN2E2N1.NAME_STRINGS.FILLER_37 + 15, 32, 5);


  if(!_h_WEBINPUT)
  {
    _h_WEBINPUT = (cob_file *) cob_cache_malloc(sizeof(cob_file));
  }
  _h_WEBINPUT->select_name = (const char *)"webinput";
  _h_WEBINPUT->file_status = _h_WEBINPUT_status;
  memset(_h_WEBINPUT_status, '0', 2);
  _h_WEBINPUT->assign = (cob_field *)&_c_20;
  _h_WEBINPUT->record = &_f_6;
  _h_WEBINPUT->variable_record = NULL;
  _h_WEBINPUT->record_min = 0;
  _h_WEBINPUT->record_max = 1024;
  _h_WEBINPUT->nkeys = 0;
  _h_WEBINPUT->keys = NULL;
  _h_WEBINPUT->file = NULL;
  _h_WEBINPUT->fd = -1;
  _h_WEBINPUT->organization = 1;
  _h_WEBINPUT->access_mode = 1;
  _h_WEBINPUT->lock_mode = 0;
  _h_WEBINPUT->open_mode = 0;
  _h_WEBINPUT->flag_optional = 0;
  _h_WEBINPUT->last_open_mode = 0;
  _h_WEBINPUT->flag_operation = 0;
  _h_WEBINPUT->flag_nonexistent = 0;
  _h_WEBINPUT->flag_end_of_file = 0;
  _h_WEBINPUT->flag_begin_of_file = 0;
  _h_WEBINPUT->flag_first_read = 0;
  _h_WEBINPUT->flag_read_done = 0;
  _h_WEBINPUT->flag_select_features = 16;
  _h_WEBINPUT->flag_needs_nl = 0;
  _h_WEBINPUT->flag_needs_top = 0;
  _h_WEBINPUT->file_version = 1;

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if(!initialized) {
  	return 0;
  }
  if(module->module_active) {
  	cob_fatal_error(COB_FERROR_CANCEL);
  }

  initialized = 0;
  return 0;

}

/* End PROGRAM-ID 'gnucobol-fastcgi-sample' */

/* End functions */

