/* Generated by            cobc 2.0.20131031 */
/* Generated from              sample.cbl */
/* Generated at                Sep 23 2016 10:14:42 */
/* GNU Cobol C++ build date    May 16 2016 14:03:52 */
/* GNU Cobol C++ package date  May 03 2014 21:13:34 UTC */
/* Compile command         cobc -x -C sample.cbl */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"sample.cbl"
#define  COB_PACKAGE_VERSION		"2.0"
#define  COB_PATCH_LEVEL		20131031
#define  COB_MODULE_FORMATTED_DATE	"Sep 23 2016 10:14:42"
#define  COB_MODULE_DATE		20160923
#define  COB_MODULE_TIME		101442

/* Global variables */
#include "sample.cpp.h"

/* Function prototypes */

static int		sample();
static int		sample_(const int);

/* Main function */
int
main(int argc, char **argv)
{
  cob_init(argc, argv);
  cob_stop_run(sample());
}

/* Functions */

/* PROGRAM-ID 'sample' */

/* ENTRY 'sample' */

static int
sample()
{
  return sample_(0);
}

static int
sample_(const int entry)
{
  /* Program local variables */
  #include "sample.cpp.l.h"

  /* Start of function code */

  /* CANCEL callback */
  if(unlikely(entry < 0)) {
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  cob_module_enter(&module, &cob_glob_ptr, 0);

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  _frame_ptr = _frame_stack;
  _frame_ptr->perform_through = 0;

  /* Initialize program */
  if(unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Save number of call params */
  module->module_num_params = cob_glob_ptr->cob_call_params;

  /* Entry dispatch */
  goto _l_2;

  /* PROCEDURE DIVISION */

  /* Line: 19        : Entry     sample                  : sample.cbl */
  _l_2:;

  /* Line: 19        : MOVE               : sample.cbl */
  memcpy((cob_u8_t *)&CURRENT_TIME_RAW, "12345678", 8);

  /* Line: 20        : MOVE               : sample.cbl */
  memcpy(WS_PGM.WS_PGM_NAME, "pgm     ", 8);

  /* Line: 21        : CALL               : sample.cbl */
  cob_glob_ptr->cob_call_params = 0;
  cob_unifunc.funcvoid = cob_call_field(&_f_11, NULL, 1, 0);
  RETURN_CODE = cob_unifunc.funcint();

  /* Line: 22        : GOBACK             : sample.cbl */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if(module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave(module);

  /* Program return */
  return RETURN_CODE;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error(COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version(COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "sample";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (fvoidpptr)sample;
  module->module_cancel.funcptr = (fvoidpptr)sample_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel(module);

  /* Initialize WORKING-STORAGE */
  RETURN_CODE = 0;
  memset((cob_u8_t *)&CURRENT_TIME_RAW, 48, 8);
  memset(WS_PGM.WS_PGM_NAME, 32, 8);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if(!initialized) {
  	return 0;
  }
  if(module->module_active) {
  	cob_fatal_error(COB_FERROR_CANCEL);
  }

  initialized = 0;
  return 0;

}

/* End PROGRAM-ID 'sample' */

/* End functions */

